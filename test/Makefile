CC = gcc
ifeq ($(shell uname -s), Darwin)
CC = clang
endif
ifeq ($(findstring clang, $(CC)), clang)
E = -Weverything
CFLAGS += $E -Wno-unknown-warning-option -Wno-missing-prototypes
CFLAGS += -Wno-unused-macros -Wno-padded -Wno-missing-noreturn
endif
CFLAGS += -std=c99 -pedantic -Wall -Wextra -Wconversion -Werror
CFLAGS += -Wno-switch-enum -Wno-double-promotion
CFLAGS += -Wbad-function-cast -Wcast-qual -Wold-style-definition -Wshadow -Wstrict-overflow \
          -Wstrict-prototypes -Wswitch-default -Wundef
#DEBUG = -O0 -g
CFLAGS += $(DEBUG)
DEFINES =  -D HUNT_OUTPUT_CHAR=putcharSpy
DEFINES += -D HUNT_OUTPUT_CHAR_HEADER_DECLARATION=putcharSpy\(int\)
DEFINES += -D HUNT_OUTPUT_FLUSH=flushSpy
DEFINES += -D HUNT_OUTPUT_FLUSH_HEADER_DECLARATION=flushSpy\(void\)
DEFINES += $(HUNT_SUPPORT_64) $(HUNT_INCLUDE_DOUBLE)
HUNT_SUPPORT_64 = -D HUNT_SUPPORT_64
HUNT_INCLUDE_DOUBLE = -D HUNT_INCLUDE_DOUBLE
SRC = ../src/hunt.c tests/testhunt.c build/testhuntRunner.c
INC_DIR = -I ../src
COV_FLAGS = -fprofile-arcs -ftest-coverage -I ../../src
BUILD_DIR = build
TARGET = build/testhunt-cov.exe

# To generate coverage, call 'make -s', the default target runs.
# For verbose output of all the tests, run 'make test'.
default: coverage
.PHONY: default coverage test clean
coverage: DEFINES += -D HUNT_NO_WEAK
coverage: $(BUILD_DIR)/testhuntRunner.c
	cd $(BUILD_DIR) && \
	$(CC) $(CFLAGS) $(DEFINES) $(foreach i,$(SRC), ../$i) $(COV_FLAGS) -o ../$(TARGET)
	rm -f $(BUILD_DIR)/*.gcda
	./$(TARGET) | grep 'Tests\|]]]' -A1
	cd $(BUILD_DIR) && \
	gcov hunt.c | head -3
	grep '###' $(BUILD_DIR)/hunt.c.gcov -C2 || true

test: $(BUILD_DIR)/testhuntRunner.c
	$(CC) $(CFLAGS) $(DEFINES) $(INC_DIR) $(SRC) -o $(TARGET)
	./$(TARGET)

# Compile only, for testing that preprocessor detection works
HUNT_C_ONLY =-c ../src/hunt.c -o $(BUILD_DIR)/hunt.o
intDetection:
	$(CC) $(CFLAGS) $(INC_DIR) $(HUNT_C_ONLY) -D HUNT_EXCLUDE_STDINT_H
	$(CC) $(CFLAGS) $(INC_DIR) $(HUNT_C_ONLY) -D HUNT_EXCLUDE_LIMITS_H

$(BUILD_DIR)/testhuntRunner.c: tests/testhunt.c | $(BUILD_DIR)
	awk $(AWK_SCRIPT) tests/testhunt.c > $@

AWK_SCRIPT=\
  '/^void test/{ declarations[d++]=$$0; gsub(/\(?void\)? ?/,""); tests[t++]=$$0; line[u++]=NR } \
  END{ print "\#include \"hunt.h\" /* Autogenerated by awk in Makefile */" ;                   \
       for (i=0; i<d; i++) { print declarations[i] ";" }                                        \
       print "int main(void)\n{\n    HuntBegin(\"" FILENAME "\");" ;                           \
       for (i=0; i<t; i++) { print "    RUN_TEST(" tests[i] ", " line[i] ");" }                 \
       print "    return HUNT_END();\n}" }'

$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

clean:
	rm -f $(TARGET) $(BUILD_DIR)/*.gc* $(BUILD_DIR)/testhuntRunner.c
